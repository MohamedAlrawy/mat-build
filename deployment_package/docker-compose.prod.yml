version: '3.8'

# =============================================================================
# SECURE PRODUCTION DOCKER COMPOSE - Uses Pre-compiled Code
# This configuration deploys the pre-compiled application
# =============================================================================

services:
  # PostgreSQL Database with Security
  db:
    image: postgres:15-alpine
    container_name: maternal_db_prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups  # For database backups
    networks:
      - maternal_network
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    command: 
      - "postgres"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "effective_cache_size=1GB"

  # Django Backend - Pre-compiled Code
  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: maternal_backend_prod
    restart: unless-stopped
    volumes:
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8003:8003"  # Bind to localhost only
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DJANGO_SETTINGS_MODULE=maternal_backend.settings
      - PYTHONOPTIMIZE=2
      - PYTHONDONTWRITEBYTECODE=1
    depends_on:
      db:
        condition: service_healthy
    networks:
      - maternal_network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx - Reverse Proxy with SSL
  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "81:81"
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt
    networks:
      - maternal_network
    depends_on:
      - web

  # Redis - Caching and Session Store
  redis:
    image: redis:7-alpine
    container_name: maternal_redis_prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - maternal_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local
  redis_data:
    driver: local
  npm_letsencrypt:
    driver: local
  npm_data:
    driver: local

networks:
  maternal_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

