# =============================================================================
# SECURE PRODUCTION DOCKERFILE
# This Dockerfile creates a hardened production environment
# with compiled Python code for intellectual property protection
# =============================================================================

# Stage 1: Build Stage - Compile Python files
FROM python:3.11-slim as builder

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive

WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy source code
COPY . .

# Compile all Python files to .pyc
RUN python -m compileall -b . && \
    find . -type f -name '*.py' ! -name 'manage.py' ! -name 'build_secure.py' -delete && \
    find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true

# =============================================================================
# Stage 2: Production Stage - Minimal secure runtime
FROM python:3.11-slim

# Security: Run as non-root user
RUN groupadd -r maternal && useradd -r -g maternal maternal

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONOPTIMIZE=2 \
    DEBIAN_FRONTEND=noninteractive \
    PATH="/home/maternal/.local/bin:$PATH"

WORKDIR /app

# Install only runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    postgresql-client \
    libpq5 \
    netcat-openbsd \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    rm -rf /root/.cache/pip

# Copy compiled code from builder
COPY --from=builder /build /app

# Copy manage.py separately (needs to remain as .py)
COPY manage.py /app/

# Create necessary directories
RUN mkdir -p /app/staticfiles /app/media /app/logs && \
    chown -R maternal:maternal /app

# Copy and set up entrypoint
COPY entrypoint.prod.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh && \
    chown maternal:maternal /app/entrypoint.sh

# Security: Remove unnecessary tools and clear cache
RUN apt-get remove -y build-essential && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Switch to non-root user
USER maternal

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8003/api/health/ || exit 1

# Expose port
EXPOSE 8003

# Security labels
LABEL security.level="production" \
      security.compiled="true" \
      security.user="non-root" \
      maintainer="maternal-health-team"

# Run entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["gunicorn", "maternal_backend.wsgi:application", \
     "--bind", "0.0.0.0:8003", \
     "--workers", "4", \
     "--worker-class", "sync", \
     "--worker-tmp-dir", "/dev/shm", \
     "--timeout", "120", \
     "--graceful-timeout", "30", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "50", \
     "--access-logfile", "-", \
     "--error-logfile", "-", \
     "--log-level", "info"]

